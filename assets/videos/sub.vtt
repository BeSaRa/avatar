WEBVTT

NOTE
language:en-US

NOTE Confidence: 0.832236111164093

00:00:02.640 --> 00:00:06.080
OK so this one's concat implement the JavaScript array dot

NOTE Confidence: 0.832236111164093

00:00:06.140 --> 00:00:08.987
concat function in the type system so it takes 2

NOTE Confidence: 0.832236111164093

00:00:09.046 --> 00:00:09.640
arguments.

NOTE Confidence: 0.9432928562164307

00:00:09.640 --> 00:00:12.521
The output should be the new array and that includes

NOTE Confidence: 0.9432928562164307

00:00:12.577 --> 00:00:14.239
inputs in left to right order.

NOTE Confidence: 0.9039209485054016

00:00:14.560 --> 00:00:16.850
So if we have an array with one and we

NOTE Confidence: 0.9039209485054016

00:00:16.910 --> 00:00:19.623
can cat it with another one that just has the

NOTE Confidence: 0.9039209485054016

00:00:19.683 --> 00:00:22.275
value 2, then we get back a new array which

NOTE Confidence: 0.9039209485054016

00:00:22.335 --> 00:00:23.239
has two values.

NOTE Confidence: 0.9387252330780029

00:00:23.239 --> 00:00:25.187
The first value is 1 and the second value is

NOTE Confidence: 0.9387252330780029

00:00:25.231 --> 00:00:25.319
2.

NOTE Confidence: 0.7240312099456787

00:00:26.320 --> 00:00:27.840
OK, pretty straightforward.

NOTE Confidence: 0.9618490934371948

00:00:28.320 --> 00:00:30.080
So same business here.

NOTE Confidence: 0.8834322094917297

00:00:31.520 --> 00:00:32.600
What do you, where would you start?

NOTE Confidence: 0.7118933200836182

00:00:32.600 --> 00:00:33.520
What do you what are you thinking?

NOTE Confidence: 0.7946421504020691

00:00:35.960 --> 00:00:39.968
So I want them both to be arrayed so these

NOTE Confidence: 0.7946421504020691

00:00:40.063 --> 00:00:41.399
extends again.

NOTE Confidence: 0.7748050093650818

00:00:41.760 --> 00:00:43.360
And I'll format you as we go because we can.

NOTE Confidence: 0.8640761375427246

00:00:43.360 --> 00:00:46.640
We only got 60 characters to work with all right.

NOTE Confidence: 0.9302183389663696

00:00:47.800 --> 00:00:50.160
Then I don't know whether I can.

NOTE Confidence: 0.8750465512275696

00:00:50.159 --> 00:00:52.852
But you know, if I was dealing with like runtime

NOTE Confidence: 0.8750465512275696

00:00:52.909 --> 00:00:54.480
values, I would spread them.

NOTE Confidence: 0.7211787700653076

00:00:54.920 --> 00:00:59.240
But I don't know if that's possible, but maybe he.

NOTE Confidence: 0.5709334015846252

00:01:00.280 --> 00:01:01.280
Put auto completed for you.

NOTE Confidence: 0.9063719511032104

00:01:01.280 --> 00:01:02.720
I hate when that happens.

NOTE Confidence: 0.6644958257675171

00:01:04.320 --> 00:01:05.000
Maybe that'll do it.

NOTE Confidence: 0.49309876561164856

00:01:05.080 --> 00:01:05.400
Yep.

NOTE Confidence: 0.7839033603668213

00:01:05.800 --> 00:01:07.440
That's it, You got it.

NOTE Confidence: 0.8419202566146851

00:01:09.360 --> 00:01:12.363
It, it's always nice when, when the TypeScript type like

NOTE Confidence: 0.8419202566146851

00:01:12.417 --> 00:01:15.045
looks, looks like the way that you would write it

NOTE Confidence: 0.8419202566146851

00:01:15.099 --> 00:01:18.317
when you're dealing with with values, we're dealing with the

NOTE Confidence: 0.8419202566146851

00:01:18.370 --> 00:01:18.799
runtime.

NOTE Confidence: 0.9263192415237427

00:01:18.800 --> 00:01:21.585
Sometimes the logic is weird, like you use extends the

NOTE Confidence: 0.9263192415237427

00:01:21.636 --> 00:01:22.720
way you'd use equals.

NOTE Confidence: 0.8836928009986877

00:01:22.760 --> 00:01:25.280
And sometimes that kind of makes the types confusing, yes.

NOTE Confidence: 0.8407359719276428

00:01:25.760 --> 00:01:28.381
So whenever it kind of stays within that syntax of

NOTE Confidence: 0.8407359719276428

00:01:28.434 --> 00:01:31.213
of values, it's always easier for me to to understand

NOTE Confidence: 0.8407359719276428

00:01:31.265 --> 00:01:31.999
and deal with.

NOTE Confidence: 0.9608858227729797

00:01:32.200 --> 00:01:33.000
I love it as well.

NOTE Confidence: 0.9175611734390259

00:01:33.000 --> 00:01:35.175
Yeah, it's a it's a it's a nice convenience when

NOTE Confidence: 0.9175611734390259

00:01:35.221 --> 00:01:36.399
that, when that day comes.

NOTE Confidence: 0.9405489563941956

00:01:37.280 --> 00:01:39.464
This one, I looked online for other examples of how

NOTE Confidence: 0.9405489563941956

00:01:39.507 --> 00:01:41.519
other people solve this and I didn't find much.

NOTE Confidence: 0.8965489268302917

00:01:41.840 --> 00:01:45.226
The only one I found which does pass the tests

NOTE Confidence: 0.8965489268302917

00:01:45.299 --> 00:01:48.612
if we search, if we if we rename things here,

NOTE Confidence: 0.8965489268302917

00:01:48.686 --> 00:01:50.600
this passes all the tests.

NOTE Confidence: 0.9494830965995789

00:01:50.760 --> 00:01:52.880
But this one is not so great.

NOTE Confidence: 0.9691694378852844

00:01:52.880 --> 00:01:54.928
So you did the right thing, I think, which is

NOTE Confidence: 0.9691694378852844

00:01:54.973 --> 00:01:56.840
that you put a constraint on the generic.

NOTE Confidence: 0.8870002627372742

00:01:57.160 --> 00:02:01.293
You forced it to say that T is AT and

NOTE Confidence: 0.8870002627372742

00:02:01.405 --> 00:02:03.639
you are both arrays.

NOTE Confidence: 0.9244920611381531

00:02:04.000 --> 00:02:07.174
But if we made a new like let's say we

NOTE Confidence: 0.9244920611381531

00:02:07.258 --> 00:02:11.435
made, you know, like let's say we made A5B5C5 here

NOTE Confidence: 0.9244920611381531

00:02:11.519 --> 00:02:15.529
and then we passed in some other thing here like

NOTE Confidence: 0.9244920611381531

00:02:15.613 --> 00:02:19.205
we passed in a can, this one down here that

NOTE Confidence: 0.9244920611381531

00:02:19.289 --> 00:02:20.959
we have won't error.

NOTE Confidence: 0.9594564437866211

00:02:21.520 --> 00:02:25.560
It will return never, which is I guess correct.

NOTE Confidence: 0.9320818781852722

00:02:26.160 --> 00:02:28.741
But really it's it's usually better just to have like

NOTE Confidence: 0.9320818781852722

00:02:28.790 --> 00:02:30.933
if you know in advance that you only want to

NOTE Confidence: 0.9320818781852722

00:02:30.982 --> 00:02:33.174
accept arrays, if you do it this way with the

NOTE Confidence: 0.9320818781852722

00:02:33.222 --> 00:02:35.901
with the generic constraints like you did, then you get

NOTE Confidence: 0.9320818781852722

00:02:35.950 --> 00:02:38.240
an error here that's pretty easy to understand.

NOTE Confidence: 0.7743245959281921

00:02:38.240 --> 00:02:40.800
So string does not satisfy the constraint unknown array.

NOTE Confidence: 0.9702838659286499

00:02:40.800 --> 00:02:42.480
So that's just something on that.

NOTE Confidence: 0.9650447368621826

00:02:42.480 --> 00:02:43.760
But yeah, that's it.

NOTE Confidence: 0.886512815952301

00:02:43.760 --> 00:02:45.092
There was no other way that I saw it to

NOTE Confidence: 0.886512815952301

00:02:45.126 --> 00:02:45.399
do this.

NOTE Confidence: 0.8742546439170837

00:02:45.400 --> 00:02:47.762
This seems like this is I'm sure there's some like

NOTE Confidence: 0.8742546439170837

00:02:47.809 --> 00:02:50.645
quirky way with iteration and like recursion, but this, this

NOTE Confidence: 0.8742546439170837

00:02:50.692 --> 00:02:53.243
was predominantly the way people solve this one is the

NOTE Confidence: 0.8742546439170837

00:02:53.291 --> 00:02:54.000
way you did it.

NOTE Confidence: 0.9162871837615967

00:02:54.000 --> 00:02:54.520
So cool.
